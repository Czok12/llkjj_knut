"""
Django settings for llkjj_art project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Django-environ setup
env = environ.Env(DEBUG=(bool, False))

# Lese .env Datei
environ.Env.read_env(BASE_DIR / ".env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

# ALLOWED_HOSTS robust setzen
ALLOWED_HOSTS = (
    env.list("ALLOWED_HOSTS")
    if "ALLOWED_HOSTS" in os.environ
    else ["localhost", "127.0.0.1"]
)


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Eigene Apps
    "auswertungen",
    "belege",
    "buchungen",
    "konten",
    # Tailwind CSS
    "tailwind",
    "llkjj_buch",  # Tailwind-App
    "theme",  # Eigene Theme-App
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Korrigiere ROOT_URLCONF und WSGI_APPLICATION
ROOT_URLCONF = "llkjj_art.urls"
WSGI_APPLICATION = "llkjj_art.wsgi.application"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# Datenbank aus .env und os.environ robust
_db_engine = os.environ.get("DATABASE_ENGINE") or "sqlite3"
if _db_engine == "postgres":
    _db_name = os.environ.get("DATABASE_NAME", "postgres")
    _db_user = os.environ.get("DATABASE_USER", "postgres")
    _db_password = os.environ.get("DATABASE_PASSWORD", "")
    _db_host = os.environ.get("DATABASE_HOST", "localhost")
    _db_port = os.environ.get("DATABASE_PORT", "5432")
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": _db_name,
            "USER": _db_user,
            "PASSWORD": _db_password,
            "HOST": _db_host,
            "PORT": _db_port,
        }
    }
else:
    _db_name = os.environ.get("DATABASE_NAME", "db.sqlite3")
    if _db_name and not _db_name.startswith("/"):
        db_path = str(BASE_DIR / _db_name)
    else:
        db_path = _db_name
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": db_path,
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Sprache und Zeitzone aus .env
LANGUAGE_CODE = os.environ.get("LANGUAGE_CODE", "de-de")
TIME_ZONE = os.environ.get("TIME_ZONE", "Europe/Berlin")

USE_I18N = True

USE_TZ = True


# Static/Media aus .env
STATIC_URL = os.environ.get("STATIC_URL", "/static/")
STATIC_ROOT = os.environ.get("STATIC_ROOT", str(BASE_DIR / "staticfiles"))
MEDIA_ROOT = os.environ.get("MEDIA_ROOT", str(BASE_DIR / "media"))
MEDIA_URL = "/media/"

# Tailwind-Konfiguration
TAILWIND_APP_NAME = "llkjj_buch"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
